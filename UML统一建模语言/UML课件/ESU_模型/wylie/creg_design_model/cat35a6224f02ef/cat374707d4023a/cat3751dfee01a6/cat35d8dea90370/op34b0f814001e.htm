<html lang=en>
<head>
<meta name="Generated by Rational Rose model" content="C:\creg\coursereg_design.mdl">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="Description" content="* Forces the thread to stop executing.        *  p        * First, the  code checkAccess /code  method of this thread is called        * with no arguments. This may result in throwing a        *  code SecurityException /code  (in the current thread).        *  p        * The thread represented by this thread is forced to stop whatever        * it is doing abnormally and to throw a newly created        *  code ThreadDeath /code  object as an exception.        *  p        * It is permitted to stop a thread that has not yet been started.        * If the thread is eventually started, it immediately terminates.        *  p        * An application should not normally try to catch        *  code ThreadDeath /code  unless it must do some extraordinary        * cleanup operation (note that the throwing of        *  code ThreadDeath /code  causes  code finally /code  clauses of        *  code try /code  statements to be executed before the thread        * officially dies).  If a  code catch /code  clause catches a        *  code ThreadDeath /code  object, it is important to rethrow the        * object so that the thread actually dies.        *  p        * The top-level error handler that reacts to otherwise uncaught        * exceptions does not print out a message or otherwise notify the        * application if the uncaught exception is an instance of        *  code ThreadDeath /code .        *       * @exception  SecurityException  if the current thread cannot modify       *               this thread.       * @see        java.lang.Thread#checkAccess()       * @see        java.lang.Thread#run()       * @see        java.lang.Thread#start()       * @see        java.lang.ThreadDeath       * @see        java.lang.ThreadGroup#uncaughtException(java.lang.Thread, java.lang.Throwable)       * @since      JDK1.0">
<meta name="KeyWords" content="stop,Operation stop,coursereg_design,model coursereg_design,">
<a href="../../../../root.html" target=_top><IMG SRC="../../../../webviewer/home.gif" BORDER="0" width="64" height="20"></a>
<meta name="Microsoft Border" content="b, default">
</head>
<body bgcolor = "#FFFFFF"><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top">
<p><font FACE="Arial, Geneva" SIZE=3><b>Operation&nbsp;void&nbsp;<IMG SRC="../../../../webviewer/34.jpg" BORDER="0" width="16" height="15">stop&nbsp;(),&nbsp;in&nbsp;Class&nbsp;<a href="class34b0f6cf0204.htm" target="contents_frame">Thread</a></b></font></p>
<font FACE="Arial, Geneva" SIZE=2><b>Documentation</b></font><BR><font FACE="Arial, Geneva" SIZE=2> 
<BR>     * Forces the thread to stop executing. 
<BR>     * &lt;p&gt;
<BR>     * First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread is called 
<BR>     * with no arguments. This may result in throwing a 
<BR>     * &lt;code&gt;SecurityException&lt;/code&gt; (in the current thread). 
<BR>     * &lt;p&gt;
<BR>     * The thread represented by this thread is forced to stop whatever 
<BR>     * it is doing abnormally and to throw a newly created 
<BR>     * &lt;code&gt;ThreadDeath&lt;/code&gt; object as an exception. 
<BR>     * &lt;p&gt;
<BR>     * It is permitted to stop a thread that has not yet been started. 
<BR>     * If the thread is eventually started, it immediately terminates. 
<BR>     * &lt;p&gt;
<BR>     * An application should not normally try to catch 
<BR>     * &lt;code&gt;ThreadDeath&lt;/code&gt; unless it must do some extraordinary 
<BR>     * cleanup operation (note that the throwing of 
<BR>     * &lt;code&gt;ThreadDeath&lt;/code&gt; causes &lt;code&gt;finally&lt;/code&gt; clauses of 
<BR>     * &lt;code&gt;try&lt;/code&gt; statements to be executed before the thread 
<BR>     * officially dies).  If a &lt;code&gt;catch&lt;/code&gt; clause catches a 
<BR>     * &lt;code&gt;ThreadDeath&lt;/code&gt; object, it is important to rethrow the 
<BR>     * object so that the thread actually dies. 
<BR>     * &lt;p&gt;
<BR>     * The top-level error handler that reacts to otherwise uncaught 
<BR>     * exceptions does not print out a message or otherwise notify the 
<BR>     * application if the uncaught exception is an instance of 
<BR>     * &lt;code&gt;ThreadDeath&lt;/code&gt;. 
<BR>     *
<BR>     * @exception  SecurityException  if the current thread cannot modify
<BR>     *               this thread.
<BR>     * @see        java.lang.Thread#checkAccess()
<BR>     * @see        java.lang.Thread#run()
<BR>     * @see        java.lang.Thread#start()
<BR>     * @see        java.lang.ThreadDeath
<BR>     * @see        java.lang.ThreadGroup#uncaughtException(java.lang.Thread, java.lang.Throwable)
<BR>     * @since      JDK1.0
<BR>     </font><BR><BR>
<TABLE BORDER=1 CELLSPACING=0 CELLPADDING=3><TR><TD><font FACE="Arial, Geneva" SIZE=2><b>Protocol</b></font></TD><TD><font FACE="Arial, Geneva" SIZE=2>&nbsp;</font></TD><TD><font FACE="Arial, Geneva" SIZE=2><b>Qualification</b></font></TD><TD><font FACE="Arial, Geneva" SIZE=2>&nbsp;</font></TD></TR><TR><TD><font FACE="Arial, Geneva" SIZE=2><b>Exceptions</b></font></TD><TD><font FACE="Arial, Geneva" SIZE=2>&nbsp;</font></TD><TD><font FACE="Arial, Geneva" SIZE=2><b>Size</b></font></TD><TD><font FACE="Arial, Geneva" SIZE=2>&nbsp;</font></TD></TR><TR><TD><font FACE="Arial, Geneva" SIZE=2><b>Time</b></font></TD><TD><font FACE="Arial, Geneva" SIZE=2>&nbsp;</font></TD><TD><font FACE="Arial, Geneva" SIZE=2><b>Concurrency</b></font></TD><TD><font FACE="Arial, Geneva" SIZE=2>Sequential</font></TD></TR><TR><TD><font FACE="Arial, Geneva" SIZE=2><b>Export&nbsp;Control</b></font></TD><TD><font FACE="Arial, Geneva" SIZE=2>PublicAccess</font></TD><TD><font FACE="Arial, Geneva" SIZE=2>&nbsp;</font></TD><TD><font FACE="Arial, Geneva" SIZE=2>&nbsp;</font></TD></TR></TABLE><BR><BR>
<font FACE="Arial, Geneva" SIZE=2><b>Preconditions</b></font><BR><font FACE="Arial, Geneva" SIZE=2></font><BR><BR>
<font FACE="Arial, Geneva" SIZE=2><b>Postconditions</b></font><BR><font FACE="Arial, Geneva" SIZE=2></font><BR><BR>
<font FACE="Arial, Geneva" SIZE=2><b>Semantics</b></font><BR><font FACE="Arial, Geneva" SIZE=2></font><BR><BR>
<!--msnavigation--></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<table border="0" width="100%" height="23">
  <tr>
    <td width="5%" height="19"></td>
    <td width="61%" height="19"><font face="Arial"><a href="../../../../../../../../../../../BLOB/copyrite/copyrite.htm"><small><small>Copyright&nbsp;
© 1987 - 2000 Rational Software Corporation&nbsp;</small></small></a></font>
    </td>
    <td width="34%" height="19">
<p align="right"><font face="Arial"><small><small>Rational Unified
Process<br>
Course Registration Project Web</small></small></font>
    </td>
  </tr>
</table>
<p>&nbsp;</p>
</td></tr><!--msnavigation--></table></body>
</html>
