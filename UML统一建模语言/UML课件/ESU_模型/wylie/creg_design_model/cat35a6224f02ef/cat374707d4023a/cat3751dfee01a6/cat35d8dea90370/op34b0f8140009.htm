<html lang=en>
<head>
<meta name="Generated by Rational Rose model" content="C:\creg\coursereg_design.mdl">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="Description" content="* Allocates a new  code Thread /code  object. This constructor has        * the same effect as  code Thread(null, null, /code        *  i gname /i  code ) /code , where  b  i gname /i  /b  is        * a newly generated name. Automatically generated names are of the        * form  code  Thread- + /code  i n /i , where  i n /i  is an integer.        *  p        * Threads created this way must have overridden their       *  code run() /code  method to actually do anything.  An example       * illustrating this method being used follows:       *  p  blockquote  pre        *     import java.lang.*;        *       *     class plain01 implements Runnable {       *         String name;        *         plain01() {       *             name = null;       *         }       *         plain01(String s) {       *             name = s;       *         }       *         public void run() {       *             if (name == null)       *                 System.out.println( A new thread created );       *             else       *                 System.out.println( A new thread with name   + name +       *                                      created );       *         }       *     }       *     class threadtest01 {       *         public static void main(String args[] ) {       *             int failed = 0 ;       *       *              b Thread t1 = new Thread(); /b          *             if (t1 != null)       *                 System.out.println( new Thread() succeed );       *             else {       *                 System.out.println( new Thread() failed );        *                 failed++;        *             }       *         }       *     }       *  /pre  /blockquote        *       * @see     java.lang.Thread#Thread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String)       * @since   JDK1.0">
<meta name="KeyWords" content="Thread,Operation Thread,coursereg_design,model coursereg_design,">
<a href="../../../../root.html" target=_top><IMG SRC="../../../../webviewer/home.gif" BORDER="0" width="64" height="20"></a>
<meta name="Microsoft Border" content="b, default">
</head>
<body bgcolor = "#FFFFFF"><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top">
<p><font FACE="Arial, Geneva" SIZE=3><b>Operation&nbsp;&nbsp;<IMG SRC="../../../../webviewer/34.jpg" BORDER="0" width="16" height="15">Thread&nbsp;(),&nbsp;in&nbsp;Class&nbsp;<a href="class34b0f6cf0204.htm" target="contents_frame">Thread</a></b></font></p>
<font FACE="Arial, Geneva" SIZE=2><b>Documentation</b></font><BR><font FACE="Arial, Geneva" SIZE=2>
<BR>     * Allocates a new &lt;code&gt;Thread&lt;/code&gt; object. This constructor has 
<BR>     * the same effect as &lt;code&gt;Thread(null, null,&lt;/code&gt;
<BR>     * &lt;i&gt;gname&lt;/i&gt;&lt;code&gt;)&lt;/code&gt;, where &lt;b&gt;&lt;i&gt;gname&lt;/i&gt;&lt;/b&gt; is 
<BR>     * a newly generated name. Automatically generated names are of the 
<BR>     * form &lt;code&gt;"Thread-"+&lt;/code&gt;&lt;i&gt;n&lt;/i&gt;, where &lt;i&gt;n&lt;/i&gt; is an integer. 
<BR>     * &lt;p&gt;
<BR>     * Threads created this way must have overridden their
<BR>     * &lt;code&gt;run()&lt;/code&gt; method to actually do anything.  An example
<BR>     * illustrating this method being used follows:
<BR>     * &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
<BR>     *     import java.lang.*; 
<BR>     *
<BR>     *     class plain01 implements Runnable {
<BR>     *         String name; 
<BR>     *         plain01() {
<BR>     *             name = null;
<BR>     *         }
<BR>     *         plain01(String s) {
<BR>     *             name = s;
<BR>     *         }
<BR>     *         public void run() {
<BR>     *             if (name == null)
<BR>     *                 System.out.println("A new thread created");
<BR>     *             else
<BR>     *                 System.out.println("A new thread with name " + name +
<BR>     *                                    " created");
<BR>     *         }
<BR>     *     }
<BR>     *     class threadtest01 {
<BR>     *         public static void main(String args[] ) {
<BR>     *             int failed = 0 ;
<BR>     *
<BR>     *             &lt;b&gt;Thread t1 = new Thread();&lt;/b&gt;  
<BR>     *             if (t1 != null)
<BR>     *                 System.out.println("new Thread() succeed");
<BR>     *             else {
<BR>     *                 System.out.println("new Thread() failed"); 
<BR>     *                 failed++; 
<BR>     *             }
<BR>     *         }
<BR>     *     }
<BR>     * &lt;/pre&gt;&lt;/blockquote&gt;
<BR>     *
<BR>     * @see     java.lang.Thread#Thread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String)
<BR>     * @since   JDK1.0
<BR>     </font><BR><BR>
<TABLE BORDER=1 CELLSPACING=0 CELLPADDING=3><TR><TD><font FACE="Arial, Geneva" SIZE=2><b>Protocol</b></font></TD><TD><font FACE="Arial, Geneva" SIZE=2>&nbsp;</font></TD><TD><font FACE="Arial, Geneva" SIZE=2><b>Qualification</b></font></TD><TD><font FACE="Arial, Geneva" SIZE=2>&nbsp;</font></TD></TR><TR><TD><font FACE="Arial, Geneva" SIZE=2><b>Exceptions</b></font></TD><TD><font FACE="Arial, Geneva" SIZE=2>&nbsp;</font></TD><TD><font FACE="Arial, Geneva" SIZE=2><b>Size</b></font></TD><TD><font FACE="Arial, Geneva" SIZE=2>&nbsp;</font></TD></TR><TR><TD><font FACE="Arial, Geneva" SIZE=2><b>Time</b></font></TD><TD><font FACE="Arial, Geneva" SIZE=2>&nbsp;</font></TD><TD><font FACE="Arial, Geneva" SIZE=2><b>Concurrency</b></font></TD><TD><font FACE="Arial, Geneva" SIZE=2>Sequential</font></TD></TR><TR><TD><font FACE="Arial, Geneva" SIZE=2><b>Export&nbsp;Control</b></font></TD><TD><font FACE="Arial, Geneva" SIZE=2>PublicAccess</font></TD><TD><font FACE="Arial, Geneva" SIZE=2>&nbsp;</font></TD><TD><font FACE="Arial, Geneva" SIZE=2>&nbsp;</font></TD></TR></TABLE><BR><BR>
<font FACE="Arial, Geneva" SIZE=2><b>Preconditions</b></font><BR><font FACE="Arial, Geneva" SIZE=2></font><BR><BR>
<font FACE="Arial, Geneva" SIZE=2><b>Postconditions</b></font><BR><font FACE="Arial, Geneva" SIZE=2></font><BR><BR>
<font FACE="Arial, Geneva" SIZE=2><b>Semantics</b></font><BR><font FACE="Arial, Geneva" SIZE=2></font><BR><BR>
<!--msnavigation--></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<table border="0" width="100%" height="23">
  <tr>
    <td width="5%" height="19"></td>
    <td width="61%" height="19"><font face="Arial"><a href="../../../../../../../../../../../BLOB/copyrite/copyrite.htm"><small><small>Copyright&nbsp;
© 1987 - 2000 Rational Software Corporation&nbsp;</small></small></a></font>
    </td>
    <td width="34%" height="19">
<p align="right"><font face="Arial"><small><small>Rational Unified
Process<br>
Course Registration Project Web</small></small></font>
    </td>
  </tr>
</table>
<p>&nbsp;</p>
</td></tr><!--msnavigation--></table></body>
</html>
